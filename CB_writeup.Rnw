\documentclass{article}
\usepackage{url}
\usepackage{amsfonts}
\usepackage[margin=1in]{geometry}
\setlength{\parindent}{0in}

\title{Accessing Data with the Census Bureau API}
\author{Alex Shum}
\begin{document}
\maketitle

\section{Introduction}
The United States Census Bureau has been conducting a decennial census since 1790.  Originally this census was a simply to count the population across the country.  More recently the decennial census includes a short-form asking for name, sex, age, and a few other demographic variables.  About one in six households also received a long-form that contained additional socioeconomic questions.  After the 2000 decennial census many of the long-form questions were collected as part of a new survey: the American Community Survey (ACS).  \\
\\
The ACS is an ongoing yearly survey that collects additional demographic variables including but not limited to age, sex, race, income and education.  Similar to the decennial census long-form, the American Community Survey is distributed based on a random selection of addresses every year.  This data is meant to provide more up to date information than the Census Bureau's decennial census and both the decennial census and the American Community Survey are required by law.\\
\\
Both the decennial survey and the ACS data are used in part by federal, state and local agencies to allocate state funding and for policy decisions.  The Census Bureau has also released some of this data for public use.  Many of the data sets are available directly in a compressed format from the Census Bureau's FTP site: \url{http://ftp2.census.gov/}.  Since 2012, the Census Bureau has also included an online developer's API in order to improve accessibility of the ACS and decennial census datasets.\\
\\
We will discuss how the ACS data is organized and how to access data from the Census Bureau's online developer's API.  We will also discuss what kind of variables are available and some limitations with the API.  We will use "Taking a Chance in the Classroom: The American Community Survey", an article by Morgan, Cetinkaya-Rundel and Stangl as a starting point on some of the limitations of the API.  This article explores some multivariate frequency distributions using data from the ACS dataset; however, there are some gaps in what we can access and inconsistencies in the database.

\section{Geography}
Before we take a look at how the variables in the Census Bureau API are organized, we first look at how the Census Bureau handles the various geographic borders.  The Census Bureau has a very sophisticated system of hierarchy for geography.  For the ACS, at the top level there is the entire nation, followed by region, division, state, county, county-subdivision, tract, block group, place, congressional district, zip code area, school district and a few other geographic divisions.  Outside of the ACS, the Census Bureau employs at least a dozen other geographic concepts.\\
\\
<<state, echo=FALSE, warning=FALSE, message=FALSE, fig.height=3, cache=TRUE>>=
library(ggplot2)
states.map = map_data("state")
states.map$CA = states.map$region=="california"
qplot(long, lat, data=states.map, group=group, order=order, geom="polygon", fill=CA) + 
  theme(legend.position = "none")
@
Near the very top of the hierarchy we can view data from all states or specify a state.  In the above plot we have selected California.\\
\\
<<county, echo=FALSE, warning=FALSE, message=FALSE, fig.height=3, cache=TRUE>>=
counties.map = map_data("county")
counties.map$CA = as.numeric(counties.map$region=="california")
counties.map[counties.map$region=="california" & counties.map$subregion=="los angeles",]$CA = 2
qplot(long, lat, data=counties.map, group=group, order=order, geom="polygon", fill=factor(CA)) + 
  theme(legend.position = "none")
@
Alternatively we can also view data from all counties in all states, we can specify all counties in a specific state or we can select a specific county within a specific state.  Above we have selected Los Angeles county within California.  Congressional district and ZIP code areas are the other geographic divisions that we can view simultaneously for all states.\\
\\
<<censustract, echo=FALSE, warning=FALSE, message=FALSE, fig.height=5, cache=TRUE>>=
library(maptools)
ca.tracts = readShapeSpatial("tl_2013_06_cousub.shp")
ca.geo = fortify(ca.tracts)
ca.data = ca.tracts@data
ca.geo$LA = 0
ca.geo[ca.geo$id %in% as.numeric(row.names(ca.data[which(ca.data$COUNTYFP=="037"),])),]$LA = 1
ca.geo[ca.geo$id == 13,]$LA = 2
qplot(long, lat, data=ca.geo, group=group, order=order, geom="polygon", fill=factor(LA)) + 
  theme(legend.position = "none")
@
There are a number of geographies available below the state and county level.  For example, the API also supports school districts, county subdivision, metropolitan statistical areas and legislative districts.  For many of these geographic divisions it is not possible to pull data without specifying a state or a county.  Above we have selected Pasadena, a county subdivision, within Los Angeles County.\\
\\
Below the county level it is quite complicated which items need to be specified.  For example, if we wanted census tracts we need to specify state and county but we cannot specify state, county, census tract and county subdivision.  Another complication is that some of the smaller geographic divisions are not necessarily nested in one of the larger geographic divisions; for example, ZIP code areas are generally used by the United States Postal Service and might span different counties or census tracts.  Additionally, Legislative districts do not line up with county borders and school districts often do not line up with either legislative distrcits or county borders.\\
\\
For a more detailed look at which geographies need to be specified, refer to the census bureau list of summary levels for each dataset.  For the 2012 ACS dataset this is located at \url{http://api.census.gov/data/2012/acs5/geo.html}.  Fortunately, the census bureau has also included JSON and XML files that can be parsed to insure that a valid geography is requested.\\
\\
%talk about XML/JSON for geographies here
\begin{verbatim}
\end{verbatim}

\section{Finding Data Sets and Tables}
%XML/JSON structure for variables list

\section{Table Structure}

\section{Limitations}
<<table, echo=FALSE, warning=FALSE, message=FALSE, cache=TRUE, results="asis">>=
library(xtable)
acsdat = read.csv("datasetSTANGL2013.csv") #chance article dataset
print(xtable(head(acsdat)))
#structure of data isn't a dataframe but multiple tables
#each table has a different "base population"
#sometimes base population for similar variables does not add up
@
From the "Taking a Chance in the Classroom: The American Community Survey" article by Morgan, Cetinkaya-Rundel and Stangl, the dataset they use is a random subset of the 2010 ACS public use microdata sample.  This article contains a number of classroom exercises that ask the reader to calculate some basic proportions about various demographic data.  The biggest difference between data pulled from the Census Bureau's online API and the sample dataset used by Morgan et al. is that in the latter dataset each row describes an individual citizen and each column is a variable.  The online API does not provide detail to the same level; variables are described in tables with each row of the table representing a geographic unit such as a state or county.  Each column of the table is a subset of the table population.\\
\\


<<var, echo=FALSE>>=
#example1: (chance #3, #5)
#age + sex + health insurance available.
#age + race + health insurance available.
#age + race + sex + health insurance not available

#example2: (chance #4)
#age + sex + marriage available
#race + sex + marriage available
#age + sex + race + marriage not available

#example3: (chance #6)
#age + sex + race available
#numbers don't match with example1 for aggregates

#example4: (chance #7)
#median income + sex + work experience available.
#per capita income + race available
#per capita income + race + sex not available
#median income + sex + race not available

#example5: (change#9)
#chance #8 available
#chance #9 not available #10
@

\section{Other Issues}
%tables formatted differently
%2010acs5 differently formatted
%difficult to compare data across years
%healthcare questions added in 2008

\section{Examples from ACS}
<<NY, echo=FALSE, warning=FALSE, message=FALSE, cache=TRUE>>=
library(plyr)
library(acs)
NYC = geo.make(state="NY", county=c("New York County", "Bronx County", "Kings County", "Queens County", "Richmond County"), tract="*")
f.nyc = acs.fetch(endyear = 2012, span = 5, geography = NYC, table.name = c("In Combination With One Or More Other Races"), col.names="pretty")

library(maptools)
ny.tracts = readShapeSpatial("Z:/My Documents/shapes/nyct2010.shp")
ny.tracts@data$id = rownames(ny.tracts@data)
ny.points = fortify(ny.tracts)
ny.df = join(ny.points, ny.tracts@data, by="id")
#CTlabel = censustract label

#merge shapefile data with ACS data
f.nyc = data.frame(f.nyc@estimate)

split=ldply(strsplit(rownames(f.nyc), ","))
f.nyc$state = tolower(sub("^.*, ", "", rownames(f.nyc)))
f.nyc$tract = tolower(gsub("Census Tract ", "", split[,1]))
f.nyc$county = tolower(gsub("^[ ]","",split[,2]))
f.nyc$county = gsub(" county", "", f.nyc$county)
f.nyc$county = gsub("kings", "brooklyn", f.nyc$county)
f.nyc$county = gsub("new york", "manhattan", f.nyc$county)
f.nyc$county = gsub("richmond", "staten island", f.nyc$county)
rownames(f.nyc) = NULL

f.nyc$tract = as.numeric(f.nyc$tract)
ny.df$CTLabel = as.numeric(as.character(ny.df$CTLabel))
ny.df$BoroName = tolower(ny.df$BoroName)

final = merge(x = ny.df, y = f.nyc, by.x = c("CTLabel", "BoroName"), by.y = c("tract", "county"), all.x=TRUE)
names(final)[19:24] = c("white", "black", "indian", "asian", "hawaiian", "other")



final$race = unlist(apply(final[,19:24], 1, function(x){
  if(sum(is.na(x)) == length(19:24)) return("NA")
  else return(names(which.max(x)))
}))
qplot(long, lat, data = final, group=group, order=order, geom="polygon", fill=race)
@

\section{Conclusion}
\end{document}