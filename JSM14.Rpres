Working with the online API of the Census Bureau
========================================================
author: Alex Shum, Heike Hofmann, Eric Hare
date: August 2014

Overview
======


Online access to Census Bureau data
===

* API to  access data released about three years ago, providing at first access to the 2010 Decennial Census
* Additional data acceeible since, among others American Community Survey
* API allows access to manageable pieces of the surveys, reduces load of data handling for users
* Access to data for web developers, ... and statisticians in their familiar computational environment

An example: majority races in Brooklyn's Census tracts
========================================================
```{r, echo=FALSE, cache=TRUE, fig.align='center', fig.width=8, fig.height=8}
library(maptools)
library(ggplot2)
library(plyr)
library(ggmap)
library(acs)
library(grid)

#get shape file for NY
ny.shape = readShapeSpatial("tl_2013_36_tract.shp")
ny.shape@data$id = rownames(ny.shape@data)
ny.points = fortify(ny.shape)
ny.df = join(ny.points, ny.shape@data, by="id")
ny.df$NAME = as.numeric(as.character(ny.df$NAME))
ny.df$COUNTYFP = as.numeric(as.character(ny.df$COUNTYFP))
ny.df = subset(ny.df,  COUNTYFP %in% c(61, 5, 47, 81, 85))
#NAME corresponds to census tracts

#get data from ACS
NYC = geo.make(state="NY", county=c("New York County", 
                                    "Bronx County", 
                                    "Kings County", 
                                    "Queens County", 
                                    "Richmond County"), tract="*")
f.nyc = acs.fetch(endyear = 2012, span = 5, 
                  geography = NYC, 
                  table.name = c("In Combination With One Or More Other Races"), 
                  col.names="pretty")

#cleanup ACS names and dataframe
#note: kings county = brooklyn, 
#new york county = manhattan 
#richmond county = staten island
f.nyc = data.frame(f.nyc@estimate)
split=ldply(strsplit(rownames(f.nyc), ","))
f.nyc$state = tolower(sub("^.*, ", "", rownames(f.nyc)))
f.nyc$tract = tolower(gsub("Census Tract ", "", split[,1]))
f.nyc$county = tolower(gsub("^[ ]","",split[,2]))
f.nyc$county = gsub(" county", "", f.nyc$county)
rownames(f.nyc) = NULL
f.nyc$tract = as.numeric(f.nyc$tract)

#lookup county names based on COUNTYFP number
ny2.df = merge(x = ny.df, y = subset(fips.county, State == 'NY'), 
               by.x = "COUNTYFP", by.y ="County.ANSI")
ny2.df$County.Name = tolower(ny2.df$County.Name)
ny2.df$County.Name = gsub(" county", "", ny2.df$County.Name)

#merge shape files with ACS data by county name
final = merge(x = ny2.df, y = f.nyc, 
              by.x = c("NAME", "County.Name"), 
              by.y = c("tract", "county"), all.x=TRUE)
names(final)[24:29] = c("white", "black", "indian", "asian", "hawaiian", "other")
final$race = unlist(apply(final[,24:29], 1, function(x){
  if(sum(is.na(x)) == length(24:29)) return("NA")
  else return(names(which.max(x)))
}))

#plot map
qmap("brooklyn new york city", zoom=10) + 
  geom_path(aes(x = long, y = lat, group=group, order=order, width = 0.7),
            data = final, alpha = 0.35) + 
  geom_polygon(aes(x = long, y = lat, group = group, order = order, fill = race, colour=race), 
               data = final, alpha = 0.3) +
  scale_fill_brewer(palette="Set2") + 
  scale_colour_brewer(palette="Set2") + 
  theme(plot.margin=unit(c(0,0,0,0), "mm"))

```
View of Brooklyn, NYC; tracts are highlighted according to majority race

Mashup of google maps and census API in R


Access to data collected through Census Bureau
========================================================

Various tools allow access at different levels

* individual/few numbers: Factfinder, Quickfacts
  - http://factfinder2.census.gov/
  - http://quickfacts.census.gov/
* subsets/slices of population with Data Ferrett:  
  - http://dataferrett.census.gov/
* entire datasets (GB of data) through ftp

API aims at medium level of data quantity: not just individual numbers, not whole population either

Online API
========================================================
- Can be accessed at: http://api.census.gov
- Request data as an HTTP GET request.
- Results in JSON file format

- Basic structure of requests:
http://api.census.gov/data/[YEAR]/[DATASET]?key=[KEY]&get=[VARIABLES]&for=[GEOGRAPHY]

- Developer's key available at: http://api.census.gov/data/key_signup.html

Online API -  datasets
========================================================
available data as of Aug 2014:
- 1990, 2000 and 2010 decennial census.
- ACS datasets available in 5-year, 3-year and 1-year summary.
- ACS data range from 2006 to 2012.  ACS datasets not available for every year.
- Economic Time Series indicators.
- Nonemployer Statistics and County Business Patterns
- Population Estimates and Projections

http://www.census.gov/data/developers/data-sets.html

<!--- http://www.census.gov/developers/ -->

Variables
========================================================
- http://api.census.gov/data/2012/acs5/variables.json
- Available variables posted in JSON format.

![var](var.png)

- A concept is a combination of factors from different questions on the ACS.
- A label is a combination of different levels of factors.


Geography
========================================================
- http://api.census.gov/data/2012/acs5/geography.json

- slew of different geographic entities: state, county, subdivision, tract, place, school district, zip code region, congressional district, ...
- some combinations are hierarchical, allowing drill down requests, e.g. 
State-County-Subdivision
- shapefiles for all geographic levels available from TIGER (Topologically Integrated Geographic Encoding and Referencing)

https://www.census.gov/geo/maps-data/data/tiger.html


Geography
========================================================
School districts of Iowa

```{r, echo=FALSE, fig.show='hold', cache=TRUE}
library(ggplot2)
library(maptools)
iowa.sd = readShapeSpatial("tl_2013_19_unsd.shp")
iowa.sd.geo = fortify(iowa.sd)

qplot(long, lat, data=iowa.sd.geo, group=group, order=order, geom="path") + theme_bw() + coord_map() + theme(axis.ticks = element_blank(), axis.text.x = element_blank(), axis.title.x=element_blank(), axis.text.y = element_blank(), axis.title.y=element_blank(), panel.grid = element_blank(), panel.border = element_blank(), legend.position = "none") 
```

***
Iowa counties

```{r , echo=FALSE, fig.show='hold', cache=TRUE}
library(ggplot2)

qplot(long, lat, data=subset(map_data('county'), region=="iowa"), group=group, order=order, geom="path") + theme_bw() + coord_map() + theme(axis.ticks = element_blank(), axis.text.x = element_blank(), axis.title.x=element_blank(), axis.text.y = element_blank(), axis.title.y=element_blank(), panel.grid = element_blank(), panel.border = element_blank(), legend.position = "none") 
```

Data in R
========================================================

acs package by Ezra Glenn provides interface to API<br />
Median income by gender and hours worked:
```
acs.fetch(endyear = 2012, span = 5, geography = states, table.number = "B19326", col.names="pretty")
```                   
```{r, echo=FALSE}
library(acs)
library(reshape2)
library(plyr)
states = geo.make(state = "*")
median = acs.fetch(endyear = 2012, span = 5, geography = states, 
                   table.number = "B19326", col.names="pretty")
med = data.frame(median@estimate)
names(med) = gsub("Median.Income.by.Sex.by.Work.Experience.for.the.Population.15..Years..Median.income.in.the.past.12.months..in.2012.inflation.adjusted.dollars.....", "", names(med))
names(med) = c('total','male_total','male_full','male_other',
                     'female_total','female_full','female_other')
head(med[,2:4],5)
```
<font size="4"> http://api.census.gov/data/2012/acs5?key=[KEY]&get=B19326_001E,B19326_002E,B19326_003E,B19326_004E,B19326_005E,B19326_006E,B19326_007E,NAME&for=state:* </font>

... ready for the classroom?
===

Comparison with exercises in </br>
<font size = "4"> Dalene Stangl, Mine Cetinkaya Rundel, and Kari Lock Morgan. "Taking a Chance in the Classroom:
The American Community Survey". In: CHANCE 26.1 (2013), pp. 42-46</br>url: http://www.tandfonline.com/doi/abs/10.1080/09332480.2013.772392.) </font>

CHANCE paper based on sample of size 1000

Sample Question:</br>
a) Generate and interpret a confidence interval for the proportion of U.S. residents who do not have health insurance.

<table border="0">
	<tbody>
		<tr>
			<td>95% CI based on sample:</td>
			<td>(0.1176, 0.1604)</td>
		</tr>
		<tr>
			<td>95% CI based on API:</td>
			<td>(0.1483, 0.1492)</td>
		</tr>
	</tbody>
</table>

====

Other questions require

* cross-classification of health insurance by race - OK
* cross-classification of health insurance, race and gender - not provided by API


Limits of the API
===

* data provided from tabulated sources, individual level data not avaialable through API (obvious privacy issues)
  * limited amount of cross-classification
  * no possibility to combine tables 
  * 'untidy' data format (Wickham, JSS 2014) requires further data manipulation for CI or tests
* Mix of 'concepts' and 'labels' problematic: column headers carry information
* Aggregation across levels require additional (non-trivial) calculations for standard errors


Conclusion
========================================================
- API great step forward in data dissemination; in particular for (web-)application developers.
- Classroom ready? ... not quite there ... exploration/data analysis at levels not provided not actually feasible
- ... but that might change in the future: 
  * API is still under development, 
  * regular updates to data,
  * active community: newsletter, Census Bureauâ€™s Developers Forum, App Gallery, ...


