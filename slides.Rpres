
========================================================
author: Alex Shum
date: May 2014

Census Bureau
========================================================
- Agency responsible for collecting demographic data.
- Officially formed in 1903 under the department of commerce.
- Primary mission is to conduct the decennial census.

 ![logo](Census_Bureau_seal.svg)

Census Data
========================================================
- Decennial census
- American community survey
- American housing survey
- Survey of construction
- National longitudinal survey
- Consumer Expenditure survey
- Surveys for other agencies: NSF, SSA, BLS and many other agencies.
  
Decennial Census
========================================================
- Mandated by Article I, Section 2 of the Constitution
- First census taken in 1790.
- Determines the number of seats in House of Representatives and number of Electoral College votes.
- Prior to 2010, the census included a "long form" containing additional demographic questions.
- 2010 Census removed the long form.  These questions now on American Community Survey.

Decennial Census
========================================================
- Short: Name, age, gender, race, marital status.
- Long: Place of birth, military service, salary.
- 2000 Census - $6.5 billion.  
- 2010 Census - $11 billion. 

Long form:
http://www.census.gov/dmd/www/pdf/d02p.pdf
Short form:
http://www.census.gov/dmd/www/pdf/d61a.pdf

American Community Survey
========================================================
- Replaces the census long form.
- Collects demographic variables including income, education, healthcare and many other variables.
- Unlike census, this survey is a yearly survey.
- Data sampled among US households.  Survey sent to 3 million addresses per year.
- 97% response rate.

American Community Survey
========================================================
 ![acs](acsform.png) 
 ![acs2](acsquestion.png)
 
<!--- http://www.census.gov/acs/www/Downloads/questionnaires/2014/Quest14.pdf -->

How can we access this data?
========================================================
- Various tools provided by the Census Bureau: factfinder, dataferret, quickfacts.
- http://factfinder2.census.gov/
- http://quickfacts.census.gov/
- http://dataferrett.census.gov/

How can we access this data?
========================================================
- The Census Bureau also provides the entire dataset for download.
- Files are quite large.
![ftp](ftp.png)

Online API
========================================================
- Can be accessed at: http://api.census.gov
- Request data as an HTTP GET request.
- The basic structure of the request:
http://api.census.gov/data/[YEAR]/[DATASET]?key=[KEY]&get=[VARIABLES]&for=[GEOGRAPHY]
- [YEAR]: year of dataset.
- [DATASET]: Which dataset to access.
- [KEY]: developer's key.
- [VARIABLES]: demographic variables.
- [GEOGRAPHY]: geographic area.

Online API - key & datasets
========================================================
- Developer's key available at: http://api.census.gov/data/key_signup.html
- 1990, 2000 and 2010 census.
- ACS datasets available in 5-year, 3-year and 1-year summary.
- ACS data range from 2006 to 2012.  ACS datasets not available for every year.
- Economic Time Series indicators.

<!--- http://www.census.gov/developers/ -->

Variables
========================================================
- http://api.census.gov/data/2012/acs5/variables.json
- Available variables posted in JSON format.
$$
\begin{verbatim}
"B27001_056E": {
  "label": "Female:!!75 years and over:!!With health insurance coverage",
  "concept": "B27001. Health Insurance Coverage Status by Sex by Age"
}
\end{verbatim}
$$
- A concept is a combination of factors from different questions on the ACS.
- A label is a combination of different levels of factors.
- A universe is the total number of people involved with a concept.

Geography
========================================================
- http://api.census.gov/data/2012/acs5/geography.json
- Available geographic entities posted in JSON format.
- Geographic entities correspond to different "summary levels".
- A "summary level" is a code for a combination of regions and used to represent the hierarchical nature of geography.
- Geographic regions: State, county, subdivision, tract, place, school district, zip code region, congressional district.
- Many combinations of geographic regions cannot be used together; valid combinations of regions will have a summary level code.

Geography
========================================================
010  <br />
020 <br />
030 <br />
040  <br />
050 <br />
060 <br />
140 <br />
860 <br />
970 <br />
***
United States  <br />
Region  <br />
Division  <br />
State  <br />
State-County  <br />
State-County-Subdivision  <br />
State-County-Tract  <br />
Zip Code Area  <br />
State-School District unified  <br />

Geography
========================================================
```{r, echo=FALSE, fig.show='hold', cache=TRUE}
library(ggplot2)
library(maptools)
iowa.sd = readShapeSpatial("tl_2013_19_unsd.shp")
iowa.sd.geo = fortify(iowa.sd)

qplot(long, lat, data=iowa.sd.geo, group=group, order=order, geom="path") + theme_bw() + coord_map() + theme(axis.ticks = element_blank(), axis.text.x = element_blank(), axis.title.x=element_blank(), axis.text.y = element_blank(), axis.title.y=element_blank(), panel.grid = element_blank(), panel.border = element_blank(), legend.position = "none") + ggtitle("Iowa Unified School Districts")
```

Geography
========================================================
```{r , echo=FALSE, fig.show='hold', cache=TRUE}
library(ggplot2)

qplot(long, lat, data=subset(map_data('county'), region=="iowa"), group=group, order=order, geom="path") + theme_bw() + coord_map() + theme(axis.ticks = element_blank(), axis.text.x = element_blank(), axis.title.x=element_blank(), axis.text.y = element_blank(), axis.title.y=element_blank(), panel.grid = element_blank(), panel.border = element_blank(), legend.position = "none") + ggtitle("Iowa Counties")
```

Formatting
========================================================
Median income by gender and hours worked.
```{r, echo=FALSE}
library(acs)
library(reshape2)
library(plyr)
states = geo.make(state = "*")
median = acs.fetch(endyear = 2012, span = 5, geography = states, 
                   table.number = "B19326", col.names="pretty")
med = data.frame(median@estimate)
names(med) = gsub("Median.Income.by.Sex.by.Work.Experience.for.the.Population.15..Years..Median.income.in.the.past.12.months..in.2012.inflation.adjusted.dollars.....", "", names(med))
names(med) = c('total','male_total','male_full','male_other',
                     'female_total','female_full','female_other')
head(med[,2:4])
```
total = overall median  <br />
full = full time  <br />
other = not full time  <br />
<font size="4"> http://api.census.gov/data/2012/acs5?key=[KEY]&get=B19326_001E,B19326_002E,B19326_003E,B19326_004E,B19326_005E,B19326_006E,B19326_007E,NAME&for=state:* </font>

Formatting
========================================================
- Each concept has its own data table.
- Each column is a label.
- Each row is a location based on specified geography.
- Data not in tidy format.  Each row should be an observation and each column a variable.
- Column headers provide categorical information. <br />
(See: http://vita.had.co.nz/papers/tidy-data.pdf)

Formatting
========================================================
```{r, echo=FALSE}
library(acs)
library(xtable)
library(reshape2)
library(plyr)
states = geo.make(state = "*")
median = acs.fetch(endyear = 2012, span = 5, geography = states, 
                   table.number = "B19326", col.names="pretty")
med = data.frame(median@estimate)
names(med) = gsub("Median.Income.by.Sex.by.Work.Experience.for.the.Population.15..Years..Median.income.in.the.past.12.months..in.2012.inflation.adjusted.dollars.....", "", names(med))
names(med) = c('total','male_total','male_full','male_other',
                     'female_total','female_full','female_other')
med$state = factor(rownames(med))
rownames(med) = NULL
med = med[,c(-1)]
med.melt = subset(melt(med, id='state'))
medcols = ldply(strsplit(as.character(med.melt$variable), "_"))
medincome = data.frame(state = med.melt$state, gender = medcols$V1, 
                       part.full = medcols$V2, income = med.melt$value)
head(medincome)
```

Taking a chance in the Classroom
========================================================
- Article by Morgan, Cetinkaya-Rundel, Stangl with classroom exercises based on ACS data.
- They use a much smaller sample of the ACS and their data is formatted much differently.
```{r, echo=FALSE}
acsdat = read.csv("datasetSTANGL2013.csv") 
head(acsdat[,1:6])
```
- We explore some of their exercises using the full ACS dataset.

Taking a chance in the Classroom
========================================================
First exercise: <br/>
In our sample of 1000 people, 861 have health inusrance and 139 do not.  Generate a confidence interval for the proportion of U.S. residents who do not have health insurance.
```{r, echo=FALSE}
acsdat = read.csv("datasetSTANGL2013.csv") 
head(acsdat[,5:8])
print(sum(!acsdat$HealthInsurance / length(acsdat$HealthInsurance)))
```

Taking a chance in the Classroom
========================================================
95% Confidence interval for this exercise: <br/>
<br/>
$$
\hat{p} \pm Z^* \sqrt{\frac{\hat{p} (1 - \hat{p})}{n}}
$$
```{r, echo=FALSE}
acsdat = read.csv("datasetSTANGL2013.csv") 
head(acsdat[,5:8])
p = sum((!acsdat$HealthInsurance) / length(!acsdat$HealthInsurance))
MOE = 1.96*sqrt(p * (1 - p) / length(acsdat$HealthInsurance))
print(c(p - MOE, p + MOE))
```


From ACS data:
========================================================
Individual level data not available. We use nation-wide estimates.<br/>
<br/>
Most relevant table from ACS: B27001 Health Insurance Coverage Status by Sex by Age
```{r, echo=FALSE}
#B27001 Health Insurance Coverage Status by Sex by Age
library(acs)
library(reshape2)
library(plyr)
#specify geography
us = geo.make(us = "*")

#B27001 Health Insurance Coverage Status by Sex by Age
states = geo.make(state = "*")
health = acs.fetch(endyear = 2012, span = 5, geography = us, table.number = "B27001", col.names="pretty")
health.df = data.frame(health@estimate)
names(health.df) = gsub("Health.Insurance.Coverage.Status.by.Sex.by.Age..", "", names(health.df))
names(health.df) = gsub(".health.insurance.coverage", "", names(health.df))
health.df = health.df[,-c(1,2,30)]
health.df = health.df[,-seq(1,52,3)]
health.df$state = rownames(health.df)
rownames(health.df) = NULL
health.melt = melt(health.df, id='state')
healthcols = ldply(strsplit(as.character(health.melt$variable), "\\.\\."))
healthsex = data.frame(state = health.melt$state, gender = healthcols$V1, 
                 age = healthcols$V2, coverage = healthcols$V3, freq = health.melt$value)
healthsex$age = factor(healthsex$age, levels(healthsex$age)[c(9,6,1:5,7,8)])
healthsex = healthsex[,-1]
head(healthsex)
```

From ACS data:
========================================================
```{r, echo=FALSE, warning = FALSE, message = FALSE}
library(acs)
library(reshape2)
library(plyr)
#specify geography
us = geo.make(us = "*")

#B27001 Health Insurance Coverage Status by Sex by Age
states = geo.make(state = "*")
health = acs.fetch(endyear = 2012, span = 5, geography = us, table.number = "B27001", col.names="pretty")
health.df = data.frame(health@estimate)
names(health.df) = gsub("Health.Insurance.Coverage.Status.by.Sex.by.Age..", "", names(health.df))
names(health.df) = gsub(".health.insurance.coverage", "", names(health.df))
health.df = health.df[,-c(1,2,30)]
health.df = health.df[,-seq(1,52,3)]
health.df$state = rownames(health.df)
rownames(health.df) = NULL
health.melt = melt(health.df, id='state')
healthcols = ldply(strsplit(as.character(health.melt$variable), "\\.\\."))
healthsex = data.frame(state = health.melt$state, gender = healthcols$V1, 
                 age = healthcols$V2, coverage = healthcols$V3, freq = health.melt$value)
healthsex$age = factor(healthsex$age, levels(healthsex$age)[c(9,6,1:5,7,8)])
healthsex = healthsex[,-1]
head(healthsex)
```

Using this data from the ACS here is our estimate of proportion of people without health insurance.
```{r, echo=FALSE, warning = FALSE, message = FALSE}
sum(healthsex[healthsex$coverage=="No",]$freq) / sum(healthsex$freq)
```

Standard Errors
========================================================
- Data from the ACS is an estimated count; proportions require additional calculations.  
- Margin of error (MOE) is available for estimated counts.
- For the standard error of a sum of estimates:
$$
SE(A + B) = \sqrt{SE(A)^2 + SE(B)^2}
$$
- For a confidence interval for proportions:
$$
SE(A/B) = 1/B \sqrt{SE(A)^2 - (A/B)^2 SE(B)^2}
$$
- These are approximations and do not take into account covariances.

Standard Errors
========================================================
- We can calculate the confidence interval for the proportion of U.S. residents who do not have health insurance.
- This is done by combining the two formulas on the previous page:
```{r, echo=FALSE, warning = FALSE, message = FALSE}
library(acs)
#specify geography
us = geo.make(us = "*")

#get request
health_acs = acs.fetch(endyear = 2012, span = 5, 
                   geography = us, 
                   table.number = "B27001", 
                   col.names="pretty")

#proportion with no insurance
p_no_insurance_acs = sum(
  health_acs@estimate[c(seq(5, 30, by=3), seq(33, 57, by=3))]
  ) / health_acs@estimate[1]

A_B = p_no_insurance_acs
B = health_acs@estimate[1]
SE_A = sum(
  health_acs@standard.error[c(seq(5, 30, by=3), seq(33, 57, by=3))]^2
  )^0.5
SE_B = health_acs@standard.error[1]
SE_p = (1 / B) * sqrt(SE_A^2 - A_B^2 * SE_B^2)
CI_L2 = A_B - qnorm(0.975)*SE_p
CI_U2 = A_B + qnorm(0.975)*SE_p
print(c(CI_L2, CI_U2))
```
- This CI is a much smaller interval and does not take into account covariances.

Other issues
========================================================
- It is not possible to combine tables.
- The only variables available need to be from an existing concept.
- Difficult to get compare numbers over different time periods.

Examples
========================================================
- The ACS 5-year dataset provides information at the census tract level.
- For New York City census tracts are geographically small due to density.
- We can look at majority race for each census tract.

Examples
========================================================
```{r, echo=FALSE, cache=TRUE, }
library(maptools)
library(ggplot2)
library(plyr)
library(ggmap)
library(acs)

#get shape file for NY
ny.shape = readShapeSpatial("tl_2013_36_tract.shp")
ny.shape@data$id = rownames(ny.shape@data)
ny.points = fortify(ny.shape)
ny.df = join(ny.points, ny.shape@data, by="id")
ny.df$NAME = as.numeric(as.character(ny.df$NAME))
ny.df$COUNTYFP = as.numeric(as.character(ny.df$COUNTYFP))
ny.df = subset(ny.df,  COUNTYFP %in% c(61, 5, 47, 81, 85))
#NAME corresponds to census tracts

#get data from ACS
NYC = geo.make(state="NY", county=c("New York County", 
                                    "Bronx County", 
                                    "Kings County", 
                                    "Queens County", 
                                    "Richmond County"), tract="*")
f.nyc = acs.fetch(endyear = 2012, span = 5, 
                  geography = NYC, 
                  table.name = c("In Combination With One Or More Other Races"), 
                  col.names="pretty")

#cleanup ACS names and dataframe
#note: kings county = brooklyn, 
#new york county = manhattan 
#richmond county = staten island
f.nyc = data.frame(f.nyc@estimate)
split=ldply(strsplit(rownames(f.nyc), ","))
f.nyc$state = tolower(sub("^.*, ", "", rownames(f.nyc)))
f.nyc$tract = tolower(gsub("Census Tract ", "", split[,1]))
f.nyc$county = tolower(gsub("^[ ]","",split[,2]))
f.nyc$county = gsub(" county", "", f.nyc$county)
rownames(f.nyc) = NULL
f.nyc$tract = as.numeric(f.nyc$tract)

#lookup county names based on COUNTYFP number
ny2.df = merge(x = ny.df, y = subset(fips.county, State == 'NY'), 
               by.x = "COUNTYFP", by.y = "County.ANSI")
ny2.df$County.Name = tolower(ny2.df$County.Name)
ny2.df$County.Name = gsub(" county", "", ny2.df$County.Name)

#merge shape files with ACS data by county name
final = merge(x = ny2.df, y = f.nyc, 
              by.x = c("NAME", "County.Name"), 
              by.y = c("tract", "county"), all.x=TRUE)
names(final)[24:29] = c("white", "black", "indian", "asian", "hawaiian", "other")
final$race = unlist(apply(final[,24:29], 1, function(x){
  if(sum(is.na(x)) == length(24:29)) return("NA")
  else return(names(which.max(x)))
}))

#plot map
qmap("brooklyn new york city", zoom=10) + 
  geom_path(aes(x = long, y = lat, group=group, order=order, width = 0.7),
            data = final, alpha = 0.35) + 
  geom_polygon(aes(x = long, y = lat, group = group, order = order, fill = race), 
               data = final, alpha = 0.3)

```

Questions
========================================================
Questions?

